{"ast":null,"code":"/**\n * Promise wrapper for superagent\n */\nfunction wrap(superagent, Promise) {\n  /**\n   * Request object similar to superagent.Request, but with end() returning\n   * a promise.\n   */\n  function PromiseRequest() {\n    superagent.Request.apply(this, arguments);\n  } // Inherit form superagent.Request\n\n\n  PromiseRequest.prototype = Object.create(superagent.Request.prototype);\n  /** Send request and get a promise that `end` was emitted */\n\n  PromiseRequest.prototype.end = function (cb) {\n    var _end = superagent.Request.prototype.end;\n    var self = this;\n    return new Promise(function (accept, reject) {\n      _end.call(self, function (err, response) {\n        if (cb) {\n          cb(err, response);\n        }\n\n        if (err) {\n          err.response = response;\n          reject(err);\n        } else {\n          accept(response);\n        }\n      });\n    });\n  };\n  /** Provide a more promise-y interface */\n\n\n  PromiseRequest.prototype.then = function (resolve, reject) {\n    var _end = superagent.Request.prototype.end;\n    var self = this;\n    return new Promise(function (accept, reject) {\n      _end.call(self, function (err, response) {\n        if (err) {\n          err.response = response;\n          reject(err);\n        } else {\n          accept(response);\n        }\n      });\n    }).then(resolve, reject);\n  };\n  /**\n   * Request builder with same interface as superagent.\n   * It is convenient to import this as `request` in place of superagent.\n   */\n\n\n  var request = function (method, url) {\n    return new PromiseRequest(method, url);\n  };\n  /** Helper for making an options request */\n\n\n  request.options = function (url) {\n    return request('OPTIONS', url);\n  };\n  /** Helper for making a head request */\n\n\n  request.head = function (url, data) {\n    var req = request('HEAD', url);\n\n    if (data) {\n      req.send(data);\n    }\n\n    return req;\n  };\n  /** Helper for making a get request */\n\n\n  request.get = function (url, data) {\n    var req = request('GET', url);\n\n    if (data) {\n      req.query(data);\n    }\n\n    return req;\n  };\n  /** Helper for making a post request */\n\n\n  request.post = function (url, data) {\n    var req = request('POST', url);\n\n    if (data) {\n      req.send(data);\n    }\n\n    return req;\n  };\n  /** Helper for making a put request */\n\n\n  request.put = function (url, data) {\n    var req = request('PUT', url);\n\n    if (data) {\n      req.send(data);\n    }\n\n    return req;\n  };\n  /** Helper for making a patch request */\n\n\n  request.patch = function (url, data) {\n    var req = request('PATCH', url);\n\n    if (data) {\n      req.send(data);\n    }\n\n    return req;\n  };\n  /** Helper for making a delete request */\n\n\n  request.del = function (url) {\n    return request('DELETE', url);\n  }; // Export the request builder\n\n\n  return request;\n}\n\nmodule.exports = wrap;","map":null,"metadata":{},"sourceType":"script"}