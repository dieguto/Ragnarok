{"ast":null,"code":"//SOURCE: https://blog.centerkey.com/2013/05/javascript-colorized-pretty-print-json.html\nclass PrettyPrintJson {\n  static toHtml(thing) {\n    const htmlEntities = string => {\n      // Makes text displayable in browsers\n      return string.replace(/&/g, '&amp;').replace(/\\\\\"/g, '&bsol;&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    };\n\n    const replacer = (match, p1, p2, p3, p4) => {\n      // Converts the four parenthesized capture groups into HTML\n      const part = {\n        indent: p1,\n        key: p2,\n        value: p3,\n        end: p4\n      };\n      const key = '<span className=json-key>';\n      const val = '<span className=json-value>';\n      const bool = '<span className=json-boolean>';\n      const str = '<span className=json-string>';\n      const isBool = ['true', 'false'].includes(part.value);\n      const valSpan = /^\"/.test(part.value) ? str : isBool ? bool : val;\n      const findName = /\"([\\w]+)\": |(.*): /;\n      const indentHtml = part.indent || '';\n      const keyHtml = part.key ? key + part.key.replace(findName, '$1$2') + '</span>: ' : '';\n      const valueHtml = part.value ? valSpan + part.value + '</span>' : '';\n      const endHtml = part.end || '';\n      return indentHtml + keyHtml + valueHtml + endHtml;\n    };\n\n    const jsonLine = /^( *)(\"[^\"]+\": )?(\"[^\"]*\"|[\\w.+-]*)?([{}[\\],]*)?$/mg;\n    return htmlEntities(JSON.stringify(thing, null, 3)).replace(jsonLine, replacer);\n  }\n\n}\n\nexport default PrettyPrintJson;","map":{"version":3,"sources":["C:\\Users\\Vinicius\\Desktop\\documentacao_api_react\\doc_api\\src\\utils\\PrettyPrintJson.js"],"names":["PrettyPrintJson","toHtml","thing","htmlEntities","string","replace","replacer","match","p1","p2","p3","p4","part","indent","key","value","end","val","bool","str","isBool","includes","valSpan","test","findName","indentHtml","keyHtml","valueHtml","endHtml","jsonLine","JSON","stringify"],"mappings":"AAAA;AAEA,MAAMA,eAAN,CAAsB;AAEnB,SAAOC,MAAP,CAAcC,KAAd,EAAqB;AAClB,UAAMC,YAAY,GAAIC,MAAD,IAAY;AAC9B;AACA,aAAOA,MAAM,CACTC,OADG,CACK,IADL,EACW,OADX,EAEHA,OAFG,CAEK,MAFL,EAEa,cAFb,EAGHA,OAHG,CAGK,IAHL,EAGW,MAHX,EAIHA,OAJG,CAIK,IAJL,EAIW,MAJX,CAAP;AAKF,KAPD;;AAQA,UAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB,KAA2B;AACzC;AACA,YAAMC,IAAI,GAAG;AAAEC,QAAAA,MAAM,EAAEL,EAAV;AAAcM,QAAAA,GAAG,EAAEL,EAAnB;AAAuBM,QAAAA,KAAK,EAAEL,EAA9B;AAAkCM,QAAAA,GAAG,EAAEL;AAAvC,OAAb;AACA,YAAMG,GAAG,GAAG,2BAAZ;AACA,YAAMG,GAAG,GAAG,6BAAZ;AACA,YAAMC,IAAI,GAAG,+BAAb;AACA,YAAMC,GAAG,GAAG,8BAAZ;AACA,YAAMC,MAAM,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkBC,QAAlB,CAA2BT,IAAI,CAACG,KAAhC,CAAf;AACA,YAAMO,OAAO,GAAG,KAAKC,IAAL,CAAUX,IAAI,CAACG,KAAf,IAAwBI,GAAxB,GAA8BC,MAAM,GAAGF,IAAH,GAAUD,GAA9D;AACA,YAAMO,QAAQ,GAAG,oBAAjB;AACA,YAAMC,UAAU,GAAGb,IAAI,CAACC,MAAL,IAAe,EAAlC;AACA,YAAMa,OAAO,GAAGd,IAAI,CAACE,GAAL,GAAWA,GAAG,GAAGF,IAAI,CAACE,GAAL,CAAST,OAAT,CAAiBmB,QAAjB,EAA2B,MAA3B,CAAN,GAA2C,WAAtD,GAAoE,EAApF;AACA,YAAMG,SAAS,GAAGf,IAAI,CAACG,KAAL,GAAaO,OAAO,GAAGV,IAAI,CAACG,KAAf,GAAuB,SAApC,GAAgD,EAAlE;AACA,YAAMa,OAAO,GAAGhB,IAAI,CAACI,GAAL,IAAY,EAA5B;AACA,aAAOS,UAAU,GAAGC,OAAb,GAAuBC,SAAvB,GAAmCC,OAA1C;AACF,KAfD;;AAgBA,UAAMC,QAAQ,GAAG,qDAAjB;AACA,WAAO1B,YAAY,CAAC2B,IAAI,CAACC,SAAL,CAAe7B,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAD,CAAZ,CACHG,OADG,CACKwB,QADL,EACevB,QADf,CAAP;AAEF;;AA9BkB;;AAkCtB,eAAeN,eAAf","sourcesContent":["//SOURCE: https://blog.centerkey.com/2013/05/javascript-colorized-pretty-print-json.html\r\n\r\nclass PrettyPrintJson {\r\n\r\n   static toHtml(thing) {\r\n      const htmlEntities = (string) => {\r\n         // Makes text displayable in browsers\r\n         return string\r\n            .replace(/&/g, '&amp;')\r\n            .replace(/\\\\\"/g, '&bsol;&quot;')\r\n            .replace(/</g, '&lt;')\r\n            .replace(/>/g, '&gt;');\r\n      };\r\n      const replacer = (match, p1, p2, p3, p4) => {\r\n         // Converts the four parenthesized capture groups into HTML\r\n         const part = { indent: p1, key: p2, value: p3, end: p4 };\r\n         const key = '<span className=json-key>';\r\n         const val = '<span className=json-value>';\r\n         const bool = '<span className=json-boolean>';\r\n         const str = '<span className=json-string>';\r\n         const isBool = ['true', 'false'].includes(part.value);\r\n         const valSpan = /^\"/.test(part.value) ? str : isBool ? bool : val;\r\n         const findName = /\"([\\w]+)\": |(.*): /;\r\n         const indentHtml = part.indent || '';\r\n         const keyHtml = part.key ? key + part.key.replace(findName, '$1$2') + '</span>: ' : '';\r\n         const valueHtml = part.value ? valSpan + part.value + '</span>' : '';\r\n         const endHtml = part.end || '';\r\n         return indentHtml + keyHtml + valueHtml + endHtml;\r\n      };\r\n      const jsonLine = /^( *)(\"[^\"]+\": )?(\"[^\"]*\"|[\\w.+-]*)?([{}[\\],]*)?$/mg;\r\n      return htmlEntities(JSON.stringify(thing, null, 3))\r\n         .replace(jsonLine, replacer);\r\n   }\r\n   \r\n}\r\n\r\nexport default PrettyPrintJson;"]},"metadata":{},"sourceType":"module"}